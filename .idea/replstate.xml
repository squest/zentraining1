<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1435270142133">{:repl-history {:ide [], :local [&quot;(in-ns \n  basicone.dsapoetra.zenleague.p25)&quot; &quot;()&quot; &quot;(count (lala 1\n             ))&quot; &quot;(count (lala 1))&quot; &quot;(+ 2 2\n   )&quot; &quot;(in-ns 'basicone.dsapoetra.zenleague.p25)&quot; &quot;(+ 2 2)&quot; &quot;(+ 5 5\n   )&quot; &quot;\n(in-ns 'basicone.dsapoetra.zenleague.p25)&quot; &quot;(explode-to-digits 100)&quot; &quot;(faktorial 5000)&quot; &quot;(faktorial 10000)&quot; &quot;(add 10)&quot; &quot;(add 10 11)&quot; &quot;(fak2 10 1)&quot; &quot;(faktorial 10)&quot; &quot;(fak2 10000 1)&quot; &quot;(fak2 10000)&quot; &quot;((fn [x] (* x x)) 5)&quot; &quot;(defn square [x] (* x x))&quot; &quot;((fn [x] (* x x)) 123)&quot; &quot;((fn [x] (* x x x)) 12)&quot; &quot;(#(* % % %) 12)&quot; &quot;(fn [] square)&quot; &quot;((fn [] square) 10)&quot; &quot;((fn [x] (* x x)) 10)&quot; &quot;(((fn [] square)) 10)&quot; &quot;((fn [x] (* x x 10)) 3)&quot; &quot;((fn [a b] (* a b)) 4 5)&quot; &quot;(let [[x &amp; xs] (range 10)] xs)&quot; &quot;(let [[x &amp; xs] (range 10)] x)&quot; &quot;(let [[a b c &amp; xs] (range 10)] [a b c xs])&quot; &quot;(let [[a b c &amp; jojon] (range 10)] [a b c jojon])&quot; &quot;(def m 10)&quot; &quot;(def sqr (fn [x] (* x x)))&quot; &quot;(sqr 23)&quot; &quot;(defn sqr [x] (* x x))&quot; &quot;(def mutlak (fn [x] (if (&gt;= x 0) x (- x))))&quot; &quot;(mutlak 10)&quot; &quot;(mutlak -10)&quot; &quot;(slurp \&quot;http://zeniusleague.com\&quot;)&quot; &quot;(take-rec 10 (range 100))&quot; &quot;(time (fibo 10))&quot; &quot;(time (fibo 20))&quot; &quot;(time (fibo 30))&quot; &quot;(time (fibo 40))&quot; &quot;(mfibo 40)&quot; &quot;(time (mfibo 40))&quot; &quot;(time (mfibo 400))&quot; &quot;(expt 10 999)&quot; &quot;(expt 10 9999)&quot; &quot;(time (expt 10 9999))&quot; &quot;(time (expt 10 999))&quot; &quot;(time (lfibo (expt 10 999)))&quot; &quot;(car/wcar (car/set :jojojo {:right \&quot;here\&quot;}))&quot; &quot;(car/wcar red-server\n          (car/set :jojojo {:right \&quot;here\&quot;}))&quot; &quot;(car/wcar red-server\n          (car/get :jojojo))&quot; &quot;(car/wcar red-server\n          (car/set :jojojo {:some \&quot;thing\&quot;}))&quot; &quot;(def m {})&quot; &quot;(assoc m :jojojo {:some \&quot;thing\&quot;})&quot; &quot;(def m (transient {}))&quot; &quot;(assoc! m :jojojo {:some \&quot;tng\&quot;})&quot; &quot;m &quot; &quot;(get m :jojojo)&quot; &quot;(assoc! m :whatever [12 4234 234 ])&quot; &quot;(get m :whatever)&quot; &quot;(java.util.UUID.)&quot; &quot;(def m (java.util.UUID.))&quot; &quot;(def m (new java.util.UUID))&quot; &quot;(time (rand-int (expt 10 9)))&quot; &quot;(Math/log10 10)&quot; &quot;(long (Math/pow 10 12))&quot; &quot;(long (Math/pow 10 15))&quot; &quot;(long (Math/pow 10 16))&quot; &quot;(long (Math/pow 10 17))&quot; &quot;(long (Math/pow 10 18))&quot; &quot;(long (Math/pow 10 20))&quot; &quot;(Math/log10 3)&quot; &quot;(str 1000)&quot; &quot;(str 1000 (apply str (reverse (str 1000))))&quot; &quot;(take 5 (cons 5 (map identity (range))))&quot; &quot;(long \&quot;123\&quot;)&quot; &quot;(.parseInt \&quot;123\&quot;)&quot; &quot;(parseInt \&quot;123\&quot;)&quot; &quot;(int \&quot;123\&quot;)&quot; &quot;(bigint \&quot;!23\&quot;)&quot; &quot;(bigint \&quot;123\&quot;)&quot; &quot;(take 10 (f 0))&quot; &quot;(f 1 1)&quot; &quot;(take 10 (f 1 1))&quot;], :remote []}}</component>
</project>