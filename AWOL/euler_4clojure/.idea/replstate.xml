<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1448263911379">{:repl-history {:ide [], :local [&quot;(remove [1 2 3] 2)&quot; &quot;(remove #(= % 2) [1 2 3])&quot; &quot;(remove #(= \&quot;,\&quot; %)\n        (slurp \&quot;resources/no22.edn\&quot;))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \&quot;,\&quot; %)))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %)))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (remove #(= \\\&quot; %)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (remove #(= \\\&quot; %))\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (remove #(= %))\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (clojure.string/split x #\\\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (clojure.string/split x \\\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (clojure.string/split x #(= \\\&quot; %))\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     #(clojure.string/split % #\\\&quot;))\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     #(clojure.string/split % \\\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     #(clojure.string/split % #\&quot; \\\&quot;\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     #(clojure.string/split % #\&quot;\\\&quot;\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     #(clojure.string/split % #\\\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (apply str))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (apply str)\n     (apply first))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     \n     (apply first))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (apply str)\n     (apply vector))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (apply str)\n     (vector))&quot; &quot;(-&gt;&gt; (slurp \&quot;resources/test.edn\&quot;)\n     (remove #(= \\, %))\n     (apply str)\n     (vector)\n     (sort-by str))&quot; &quot;(slurp \&quot;resources/no22.txt\&quot;)&quot; &quot;(range 1 (inc 9))&quot; &quot;(range 1 9)&quot; &quot;(abund? 12)&quot; &quot;(abund? 28)&quot; &quot;(abund? 16)&quot; &quot;(no23 100)&quot; &quot;(no23 1000)&quot; &quot;(no23 10000)&quot; &quot;(no23 28123)&quot; &quot;(filter abun? (range 1 101))&quot; &quot;(filter abund? (range 1 101))&quot; &quot;(abunsum? 24)&quot; &quot;(abunsum? 36)&quot; &quot;(- 346427046 28123)&quot; &quot;(reduce + (range 12))&quot; &quot;(reduce + (filter core/prime? (range 1 10)))&quot; &quot;(filter core/prime? (range 1 10))&quot; &quot;(reduce + (filter abund? (range 1 (inc 28123))))&quot; &quot;(reduce + (range 1 (inc 28123)))&quot; &quot;(- 395465626 97861532)&quot; &quot;(/ 28123 2)&quot; &quot;(quot 28123 2)&quot; &quot;(abund? 14061)&quot; &quot;(reduce + (filter abund? (range 1 (inc 14061))))&quot; &quot;(- 395465626 (* 2 24519290))&quot; &quot;(no23 20161)&quot; &quot;(filter core/prime? (range 990000 1000000))&quot; &quot;(count prime? [1 2 3])&quot; &quot;(count #(= prime?) [1 2 3])&quot; &quot;(count #(= prime? %) [1 2 3])&quot; &quot;(filter #(= 1 %) [1 2 3])&quot; &quot;(pandigital? 2)&quot; &quot;(count (pandigital? 211))&quot; &quot;(= 1 count (pandigital? 211))&quot; &quot;(pandigital? 21)&quot; &quot;(pandigital? 21\n             1\n             )&quot; &quot;(pandigital? 211)&quot; &quot;(pandigital? 12)&quot; &quot;(no41 12)&quot; &quot;(no41 100)&quot; &quot;(no41 1000000)&quot; &quot;(no41 1010000)&quot; &quot;(no41 1050000)&quot; &quot;(no41 1100000)&quot; &quot;(no41 2000000)&quot; &quot;(no41 20)&quot; &quot;(no41 1500000)&quot; &quot;(prime? 7999921)&quot; &quot;(core/prime? 7999921)&quot; &quot;(no41 10000000)&quot; &quot;()&quot; &quot;(no41 1000000000)&quot; &quot;(no41 987654321)&quot; &quot;(into #{} (no41 987654321))&quot; &quot;(set (no41 987654321))&quot; &quot;(set [(no41 987654321)])&quot; &quot;(set [(numtodig (no41 987654321))])&quot; &quot;(numtodig (no41 987654321))&quot; &quot;(set [(core/numtodig (no41 987654321))])&quot; &quot;(set (core/numtodig (no41 987654321)))&quot; &quot;(hash-set (core/numtodig (no41 987654321)))&quot; &quot;(apply hash-set (core/numtodig (no41 987654321)))&quot; &quot;(set (core/numtodig 1234))&quot; &quot;(pandigital? 123)&quot; &quot;(pandigital? 1231)&quot; &quot;(pandigital? 1233214)&quot; &quot;(some prime? [1 2 3])&quot; &quot;(some even? [1 2 3])&quot; &quot;(some even? [1 1 3])&quot; &quot;(no41 8000000)&quot; &quot;(sort [1 2 4 2])&quot; &quot;(range 1 10)&quot; &quot;(count (range 1 10))&quot; &quot;(= (range 1 4) [1 2 3])&quot; &quot;(pandigital? 123987654)&quot; &quot;(pandigital? 987654319)&quot; &quot;(no41 100000000)&quot;], :remote []}}</component>
</project>