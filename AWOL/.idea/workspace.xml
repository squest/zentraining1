<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="33815887-384c-41af-8820-67e993c2c21b" name="Default" comment="" />
    <ignored path="AWOL.iws" />
    <ignored path=".idea/workspace.xml" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CreatePatchCommitExecutor">
    <option name="PATCH_PATH" value="" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="AWOL" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="826">
              <caret line="226" column="66" selection-start-line="226" selection-start-column="66" selection-end-line="226" selection-end-column="66" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="traintest.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/traintest.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="400">
              <caret line="25" column="0" selection-start-line="25" selection-start-column="0" selection-end-line="25" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="part2.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/part2.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="682">
              <caret line="46" column="20" selection-start-line="46" selection-start-column="20" selection-end-line="46" selection-end-column="20" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/problemsolving.clj" />
        <option value="$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/core.clj" />
        <option value="$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/traintest.clj" />
        <option value="$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/part2.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="width" value="1366" />
    <option name="height" value="768" />
  </component>
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <expanded-state>
          <State>
            <id />
          </State>
          <State>
            <id>Declaration redundancyJava</id>
          </State>
          <State>
            <id>General</id>
          </State>
          <State>
            <id>HTML</id>
          </State>
          <State>
            <id>ImportsJava</id>
          </State>
          <State>
            <id>Java</id>
          </State>
          <State>
            <id>Probable bugsJava</id>
          </State>
          <State>
            <id>RELAX NG</id>
          </State>
          <State>
            <id>Verbose or redundant code constructsJava</id>
          </State>
          <State>
            <id>XML</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>XmlHighlighting</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
    <OptionsSetting value="true" id="Add" />
    <OptionsSetting value="true" id="Remove" />
    <OptionsSetting value="true" id="Checkout" />
    <OptionsSetting value="true" id="Update" />
    <OptionsSetting value="true" id="Status" />
    <OptionsSetting value="true" id="Edit" />
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane />
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scratches" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
    <property name="settings.editor.splitter.proportion" value="0.2" />
  </component>
  <component name="ReplState" timestamp="1478256870884">{:repl-history {:ide [], :local [&quot;(run-tests 'euler-4clojure.traintest)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   ((:rank a) (second x)))\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   {:suit ((:rank a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   a)\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [a {:suit {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range))}\n        x (seq %)]\n   {:suit ((:suit a) (first x))\n    :rank ((:rank a) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [x (seq %)]\n   {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first x))\n    :rank ((zipmap (seq \&quot;23456789TJQKA\&quot;) (range)) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(str '\\1)&quot; &quot;(str '\&quot;s\&quot;)&quot; &quot;(letfn\n  [(foo [x y] #(bar (conj x y) y))\n   (bar [x y] (if (&gt; (last x) 10)\n                x\n                #(foo x (+ 2 y))))]\n  (trampoline foo [] 1))&quot; &quot;(#(sub-two (* 3 x)) 2)&quot; &quot;(letfn [(triple [x] #(sub-two (* 3 x)))\n        (sub-two [x] #(stop?(- x 2)))\n        (stop? [x] (if (&gt; x 50) x #(triple x)))]\n  (triple triple 2))&quot; &quot;(letfn [(triple [x] #(sub-two (* 3 x)))\n        (sub-two [x] #(stop?(- x 2)))\n        (stop? [x] (if (&gt; x 50) x #(triple x)))]\n  (map triple 2))&quot; &quot;(letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n        (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n  (map (partial trampoline my-even?) (range 6)))&quot; &quot;(letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n        (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n  (map (partial loop my-even?) (range 6)))&quot; &quot;(-&gt;&gt; (range 40)\n     (map #(mod 40 %)))&quot; &quot;(mod 40 3)&quot; &quot;(rem 40 3)&quot; &quot;(map #(rem 40 %) [1 2 3])&quot; &quot;(filter #(rem 40 %) [1 2 3])&quot; &quot;(filter #(rem 40 %) (range 40))&quot; &quot;(range 1 40)&quot; &quot;(filter #(rem 40 %) (range 1 40))&quot; &quot;(filter #(= 0 (rem 40 %)) (range 1 40))&quot; &quot;(filter #(not= 0 (rem 40 %)) (range 1 40))&quot; &quot;(count (filter #(not= 0 (rem 40 %)) (range 1 40)))&quot; &quot;(fn [a]\n  (let [f (fn [x]\n            (filter #(not= 0 (rem x %)) (range 1 x)))]\n    (f a)))&quot; &quot;((fn [a]\n   (let [f (fn [x]\n             (filter #(not= 0 (rem x %)) (range 1 x)))]\n     (f a)))\n  40)&quot; &quot;((fn [a]\n   (let [f (fn [x]\n             (filter #(not= 0 (rem x %)) (range 1 x)))]\n     (count (f a))))\n  40)&quot; &quot;(map [1 2 3] [2 1])&quot; &quot;(map (set [1 2 3]) [2 1])&quot; &quot;(coll? [])&quot; &quot;(empty? [])&quot; &quot;(last [1])&quot; &quot;((fn [n]\n   (count n))\n  [1])&quot; &quot;((fn [n]\n   [(count n) (last n)])\n  [1])&quot; &quot;(take 2 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 3 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 4 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 1 (iterate\n          #([(count n) (last n)])\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #[(count n) (last n)]\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #[(count %) (last %)]\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          (#[(count %) (last %)]\n            [1 1 1 4 4])))&quot; &quot;(take 1 (iterate\n          (#([(count %) (last %)])\n            [1 1 1 4 4])))&quot; &quot;(#([%]) 4)&quot; &quot;(#(vec %) 4)&quot; &quot;(#(vector %) 4)&quot; &quot;(take 1 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1 1 1 4 4]))&quot; &quot;(vector 2 3)&quot; &quot;(take 1 (iterate\n          (vector (count %) (last %))\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #(vector (count %) (last %))\n          [1 1 1 4 4]))&quot; &quot;(take 1 ((fn [x]\n           (iterate\n             #(vector (count %) (last %))\n             x)) [1 1 1 4 4]))&quot; &quot;(first\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(second\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(take 2\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partitiion-by identitiy))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identitiy))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identity)\n     (map count))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identity)\n     (map last))&quot; &quot;((let [n (partition-by identity x)]\n   (zipmap\n     (map count x)\n     (map last x)))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (zipmap\n     (map count n)\n     (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(map vector (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(vec (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(vector (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (vec\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (vector\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (map vec\n        (map count n)\n        (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (zipmap\n        (map count n)\n        (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (vec (let [n (partition-by identity %)]\n                  (zipmap\n                    (map count n)\n                    (map last n)))))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (vec (let [n (partition-by identity %)]\n                  (zipmap\n                    (map count n)\n                    (map last n)))))\n  [1])&quot; &quot;(take 3 (iterate #(flatten (vec (let [n (partition-by identity %)]\n                           (zipmap\n                             (map count n)\n                             (map last n)))))\n          [1]))&quot; &quot;(take 3\n      (fn [x]\n        (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n)))))))\n      [1])&quot; &quot;(take 3\n      (fn [x]\n        (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n))))))\n        [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                   (zipmap\n                                     (map count n)\n                                     (map last n))))))) [1]))&quot; &quot;(take 3 (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n)))))\n                 [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vec (let [n (partition-by identity %)]\n                       (zipmap\n                         (map count n)\n                         (map last n))))\n           x)) [1]))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n         ((fn [x]\n            (iterate\n              #(flatten (vec (let [n (partition-by identity %)]\n                               (zipmap\n                                 (map count n)\n                                 (map last n)))))\n              x)) [1])))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n         ((fn [x]\n            (iterate\n              #(vec\n                (flatten (vec (let [n (partition-by identity %)]\n                                (zipmap\n                                  (map count n)\n                                  (map last n))))))\n              x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vector\n             (vec\n               (flatten (vec (let [n (partition-by identity %)]\n                               (zipmap\n                                 (map count n)\n                                 (map last n)))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vec\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(map vec\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n       ((fn [x]\n          (iterate\n            #(vec\n              (flatten (vec (let [n (partition-by identity %)]\n                              (zipmap\n                                (map count n)\n                                (map last n))))))\n            x)) [1])))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n       ((fn [x]\n          (iterate\n            #(into []\n              (flatten (vec (let [n (partition-by identity %)]\n                              (zipmap\n                                (map count n)\n                                (map last n))))))\n            x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(flatten (vec (let [n (partition-by identity %)]\n                            (zipmap\n                              (map count n)\n                              (map last n)))))\n           x)) [1]))&quot; &quot;(vec ([1] (1 1) (2 1)))&quot; &quot;(vector ([1] (1 1) (2 1)))&quot; &quot;(apply vector ([1] (1 1) (2 1)))&quot; &quot;(mao vector ([1] (1 1) (2 1)))&quot; &quot;(map vector ([1] (1 1) (2 1)))&quot; &quot;(map vec ([1] (1 1) (2 1)))&quot; &quot;(map vec [[1] (1 1) (2 1)])&quot; &quot;(type ([1] (1 1) (2 1)))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n                  (flatten (vector (let [n (partition-by identity %)]\n                                     (zipmap\n                                       (map count n)\n                                       (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n                  (flatten (vec (let [n (partition-by identity %)]\n                                     (zipmap\n                                       (map count n)\n                                       (map last n))))))\n           x)) [1]))&quot; &quot;(vec (take 3\n           ((fn [x]\n              (iterate\n                #(into []\n                       (flatten (vec (let [n (partition-by identity %)]\n                                       (zipmap\n                                         (map count n)\n                                         (map last n))))))\n                x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (vec\n           (iterate\n             #(into []\n                    (flatten (vec (let [n (partition-by identity %)]\n                                    (zipmap\n                                      (map count n)\n                                      (map last n))))))\n             x))) [1]))&quot;], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.Unnamed">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
      <method />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="" />
      <setting name="path" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="JarApplication" factoryName="JAR Application">
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Java Scratch" factoryName="Java Scratch">
      <option name="SCRATCH_FILE_ID" value="0" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
      <method />
    </configuration>
    <configuration default="false" name="Unnamed" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="euler_4clojure" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$/euler_4clojure" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <list size="1">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.Unnamed" />
    </list>
    <configuration name="&lt;template&gt;" type="JUnit" default="true" selected="false">
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
    </configuration>
    <configuration name="&lt;template&gt;" type="TestNG" default="true" selected="false">
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
    </configuration>
    <configuration name="&lt;template&gt;" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
    </configuration>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1366" height="768" extended-state="6" />
    <editor active="false" />
    <layout>
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="REPL" active="true" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.6778917" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.2306003" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="-1" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="Vcs.Log.UiProperties">
    <option name="RECENTLY_FILTERED_USER_GROUPS">
      <collection />
    </option>
    <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
      <collection />
    </option>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/4clojure.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="261">
          <caret line="60" column="32" selection-start-line="60" selection-start-column="32" selection-end-line="60" selection-end-column="32" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/problemsolving.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="288">
          <caret line="18" column="31" selection-start-line="18" selection-start-column="31" selection-end-line="18" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="826">
          <caret line="226" column="66" selection-start-line="226" selection-start-column="66" selection-end-line="226" selection-end-column="66" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/traintest.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="400">
          <caret line="25" column="0" selection-start-line="25" selection-start-column="0" selection-end-line="25" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/euler_4clojure/src/euler_4clojure/part2.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="682">
          <caret line="46" column="20" selection-start-line="46" selection-start-column="20" selection-end-line="46" selection-end-column="20" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
</project>