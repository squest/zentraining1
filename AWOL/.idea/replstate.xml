<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1478256870884">{:repl-history {:ide [], :local [&quot;(run-tests 'euler-4clojure.traintest)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   ((:rank a) (second x)))\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   {:suit ((:rank a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))\n           :suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;D2\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   {:suit ((:suit a) (first x)) :rank ((:rank a) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [a {:suit (zipmap (seq \&quot;CDHS\&quot;) [:club :diamond :heart :spade])\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range 13))}\n        x (seq %)]\n   a)\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [a {:suit {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n           :rank (zipmap (seq \&quot;23456789TJQKA\&quot;) (range))}\n        x (seq %)]\n   {:suit ((:suit a) (first x))\n    :rank ((:rank a) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(#(let [x (seq %)]\n   {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first x))\n    :rank ((zipmap (seq \&quot;23456789TJQKA\&quot;) (range)) (second x))})\n  \&quot;DQ\&quot;)&quot; &quot;(str '\\1)&quot; &quot;(str '\&quot;s\&quot;)&quot; &quot;(letfn\n  [(foo [x y] #(bar (conj x y) y))\n   (bar [x y] (if (&gt; (last x) 10)\n                x\n                #(foo x (+ 2 y))))]\n  (trampoline foo [] 1))&quot; &quot;(#(sub-two (* 3 x)) 2)&quot; &quot;(letfn [(triple [x] #(sub-two (* 3 x)))\n        (sub-two [x] #(stop?(- x 2)))\n        (stop? [x] (if (&gt; x 50) x #(triple x)))]\n  (triple triple 2))&quot; &quot;(letfn [(triple [x] #(sub-two (* 3 x)))\n        (sub-two [x] #(stop?(- x 2)))\n        (stop? [x] (if (&gt; x 50) x #(triple x)))]\n  (map triple 2))&quot; &quot;(letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n        (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n  (map (partial trampoline my-even?) (range 6)))&quot; &quot;(letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n        (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n  (map (partial loop my-even?) (range 6)))&quot; &quot;(-&gt;&gt; (range 40)\n     (map #(mod 40 %)))&quot; &quot;(mod 40 3)&quot; &quot;(rem 40 3)&quot; &quot;(map #(rem 40 %) [1 2 3])&quot; &quot;(filter #(rem 40 %) [1 2 3])&quot; &quot;(filter #(rem 40 %) (range 40))&quot; &quot;(range 1 40)&quot; &quot;(filter #(rem 40 %) (range 1 40))&quot; &quot;(filter #(= 0 (rem 40 %)) (range 1 40))&quot; &quot;(filter #(not= 0 (rem 40 %)) (range 1 40))&quot; &quot;(count (filter #(not= 0 (rem 40 %)) (range 1 40)))&quot; &quot;(fn [a]\n  (let [f (fn [x]\n            (filter #(not= 0 (rem x %)) (range 1 x)))]\n    (f a)))&quot; &quot;((fn [a]\n   (let [f (fn [x]\n             (filter #(not= 0 (rem x %)) (range 1 x)))]\n     (f a)))\n  40)&quot; &quot;((fn [a]\n   (let [f (fn [x]\n             (filter #(not= 0 (rem x %)) (range 1 x)))]\n     (count (f a))))\n  40)&quot; &quot;(map [1 2 3] [2 1])&quot; &quot;(map (set [1 2 3]) [2 1])&quot; &quot;(coll? [])&quot; &quot;(empty? [])&quot; &quot;(last [1])&quot; &quot;((fn [n]\n   (count n))\n  [1])&quot; &quot;((fn [n]\n   [(count n) (last n)])\n  [1])&quot; &quot;(take 2 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 3 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 4 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1]))&quot; &quot;(take 1 (iterate\n          #([(count n) (last n)])\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #[(count n) (last n)]\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #[(count %) (last %)]\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          (#[(count %) (last %)]\n            [1 1 1 4 4])))&quot; &quot;(take 1 (iterate\n          (#([(count %) (last %)])\n            [1 1 1 4 4])))&quot; &quot;(#([%]) 4)&quot; &quot;(#(vec %) 4)&quot; &quot;(#(vector %) 4)&quot; &quot;(take 1 (iterate\n          (fn [n]\n            [(count n) (last n)])\n          [1 1 1 4 4]))&quot; &quot;(vector 2 3)&quot; &quot;(take 1 (iterate\n          (vector (count %) (last %))\n          [1 1 1 4 4]))&quot; &quot;(take 1 (iterate\n          #(vector (count %) (last %))\n          [1 1 1 4 4]))&quot; &quot;(take 1 ((fn [x]\n           (iterate\n             #(vector (count %) (last %))\n             x)) [1 1 1 4 4]))&quot; &quot;(first\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(second\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(take 2\n  ((fn [x]\n     (iterate\n       #(vector (count %) (last %))\n       x)) [1 1 1 4 4]))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partitiion-by identitiy))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identitiy))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identity)\n     (map count))&quot; &quot;(-&gt;&gt; [1 1 1 4 4]\n     (partition-by identity)\n     (map last))&quot; &quot;((let [n (partition-by identity x)]\n   (zipmap\n     (map count x)\n     (map last x)))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (zipmap\n     (map count n)\n     (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(map vector (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(vec (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(vector (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (vec\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(into [] (let [n (partition-by identity %)]\n            (vector\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (map vec\n        (map count n)\n        (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(let [n (partition-by identity %)]\n   (zipmap\n        (map count n)\n        (map last n)))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (let [n (partition-by identity %)]\n            (zipmap\n              (map count n)\n              (map last n))))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (vec (let [n (partition-by identity %)]\n                  (zipmap\n                    (map count n)\n                    (map last n)))))\n  [1 1 1 4 4])&quot; &quot;(#(flatten (vec (let [n (partition-by identity %)]\n                  (zipmap\n                    (map count n)\n                    (map last n)))))\n  [1])&quot; &quot;(take 3 (iterate #(flatten (vec (let [n (partition-by identity %)]\n                           (zipmap\n                             (map count n)\n                             (map last n)))))\n          [1]))&quot; &quot;(take 3\n      (fn [x]\n        (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n)))))))\n      [1])&quot; &quot;(take 3\n      (fn [x]\n        (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n))))))\n        [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                   (zipmap\n                                     (map count n)\n                                     (map last n))))))) [1]))&quot; &quot;(take 3 (iterate #(flatten (vec (let [n (partition-by identity %)]\n                                  (zipmap\n                                    (map count n)\n                                    (map last n)))))\n                 [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vec (let [n (partition-by identity %)]\n                       (zipmap\n                         (map count n)\n                         (map last n))))\n           x)) [1]))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n         ((fn [x]\n            (iterate\n              #(flatten (vec (let [n (partition-by identity %)]\n                               (zipmap\n                                 (map count n)\n                                 (map last n)))))\n              x)) [1])))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n         ((fn [x]\n            (iterate\n              #(vec\n                (flatten (vec (let [n (partition-by identity %)]\n                                (zipmap\n                                  (map count n)\n                                  (map last n))))))\n              x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vector\n             (vec\n               (flatten (vec (let [n (partition-by identity %)]\n                               (zipmap\n                                 (map count n)\n                                 (map last n)))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(vec\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(map vec\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n             (flatten (vec (let [n (partition-by identity %)]\n                             (zipmap\n                               (map count n)\n                               (map last n))))))\n           x)) [1]))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n       ((fn [x]\n          (iterate\n            #(vec\n              (flatten (vec (let [n (partition-by identity %)]\n                              (zipmap\n                                (map count n)\n                                (map last n))))))\n            x)) [1])))&quot; &quot;(= [[1 1] [2 1] [1 2 1 1]]\n   (take 3\n       ((fn [x]\n          (iterate\n            #(into []\n              (flatten (vec (let [n (partition-by identity %)]\n                              (zipmap\n                                (map count n)\n                                (map last n))))))\n            x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(flatten (vec (let [n (partition-by identity %)]\n                            (zipmap\n                              (map count n)\n                              (map last n)))))\n           x)) [1]))&quot; &quot;(vec ([1] (1 1) (2 1)))&quot; &quot;(vector ([1] (1 1) (2 1)))&quot; &quot;(apply vector ([1] (1 1) (2 1)))&quot; &quot;(mao vector ([1] (1 1) (2 1)))&quot; &quot;(map vector ([1] (1 1) (2 1)))&quot; &quot;(map vec ([1] (1 1) (2 1)))&quot; &quot;(map vec [[1] (1 1) (2 1)])&quot; &quot;(type ([1] (1 1) (2 1)))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n                  (flatten (vector (let [n (partition-by identity %)]\n                                     (zipmap\n                                       (map count n)\n                                       (map last n))))))\n           x)) [1]))&quot; &quot;(take 3\n      ((fn [x]\n         (iterate\n           #(into []\n                  (flatten (vec (let [n (partition-by identity %)]\n                                     (zipmap\n                                       (map count n)\n                                       (map last n))))))\n           x)) [1]))&quot; &quot;(vec (take 3\n           ((fn [x]\n              (iterate\n                #(into []\n                       (flatten (vec (let [n (partition-by identity %)]\n                                       (zipmap\n                                         (map count n)\n                                         (map last n))))))\n                x)) [1])))&quot; &quot;(take 3\n      ((fn [x]\n         (vec\n           (iterate\n             #(into []\n                    (flatten (vec (let [n (partition-by identity %)]\n                                    (zipmap\n                                      (map count n)\n                                      (map last n))))))\n             x))) [1]))&quot;], :remote []}}</component>
</project>