<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1444988521865">{:repl-history {:ide [], :local [&quot;(time (no92b 10000000))&quot; &quot;(list prob22)&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= nil %)))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= empty? %)))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %)))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (count))&quot; &quot;(count (list22 prob22))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by first))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by first))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort-by first)\n     (sort)\n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by second)    \n     \n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by third)    \n     \n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by nth 2)    \n     \n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by nth % 2)    \n     \n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by (second (rest))))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by (second (rest %))))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by first)\n     (sort-by second)\n     )&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     \n     )&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort)\n     (sort-by first)\n     (sort-by second))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort)\n     (sort-by first))&quot; &quot;(-&gt;&gt; [[1 2] [1 2 3] [1 3 2] [1 2 1 3] [1 3] [1 3 1]]\n     (remove #(= [] %))\n     (sort)\n     (sort-by length)\n     )&quot; &quot;(map count [[1 2 3] [2 3]])&quot; &quot;(max (map count [[1 2 3] [2 3]]))&quot; &quot;(maximum (map count [[1 2 3] [2 3]]))&quot; &quot;(sort (map count [[1 2 3] [2 3]]))&quot; &quot;(sort (list22 prob22))&quot; &quot;(sort (map count (list22 prob22)))&quot; &quot;(sort-by nth [[1 2 3] [5 3]])&quot; &quot;(sort-by nth [[1 2 3] [5 3]] 3)&quot; &quot;(sort-by (nth % 2) [[1 2 3] [5 3]])&quot; &quot;(sort-by #(nth % 1) [[1 2 3] [5 3]])&quot; &quot;(sort-by #(nth % 2) [[1 2 3] [5 3]])&quot; &quot;(group-by first)&quot; &quot;((group-by first [[1 2 3] [5 3]])&quot; &quot;(group-by first [[1 2 3] [5 3]])&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (group-by first))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort)\n     (sort-by second)\n     (sort by first)\n     (group-by first))&quot; &quot;()&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort)\n     (sort-by second)\n     (sort-by first)\n     (group-by first))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (remove #(= [] %))\n     (sort)\n     (sort-by second)\n     (sort-by first))&quot; &quot;(def a )&quot; &quot;(def a (-&gt;&gt; (list22 prob22)\n            (remove #(= [] %))\n            (sort)\n            (sort-by second)\n            (sort-by first)\n            (group-by first)))&quot; &quot;(group-by first a)&quot; &quot;(filter (first))&quot; &quot;(some #(= (first [[1 2] [1]]) %)[[1 2] [1]])&quot; &quot;(first [[1 2] [1]])&quot; &quot;(first (first [[1 2] [1]]))&quot; &quot;(map first [[1 2] [1]] ())&quot; &quot;(map first [[1 2] [1]])&quot; &quot;(compare \&quot;abd\&quot; \&quot;abc\&quot;)&quot; &quot;(compare [1 2 3] [1 2 2])&quot; &quot;(&gt; (compare [1 2 3] [1 2 2]) 0)&quot; &quot;(&gt; (compare [1 2 3] [1 2 2 3]) 0)&quot; &quot;(compare [1 2 3] [1 2 2 3])&quot; &quot;(compare (rest [1 2 3]) (rest [1 2 2 3]))&quot; &quot;(rest [1 2 3])&quot; &quot;(compare [(rest [1 2 3])] [(rest [1 2 2 3])])&quot; &quot;(nth 0 [1 2 3])&quot; &quot;(nth [1 2 3] 0)&quot; &quot;(count [1 2 3])&quot; &quot;(nth [1 2] 3)&quot; &quot;(filter #(= 1 (count %)) [[1] [1 2]])&quot; &quot;(filter #(&gt;= 1 (count %)) [[1] [1 2]])&quot; &quot;(filter #(&gt;= (count %) 1 ) [[1] [1 2]])&quot; &quot;(map nth (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]]) 0) &quot; &quot;(filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]]) 0&quot; &quot;(filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])&quot; &quot;(nth (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]]) 0) &quot; &quot;(map (nth (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]]) 0)) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     #(map nth % 0)) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     #(nth % 0)) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     (map first)) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     (map nth 0)) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     (map #(nth % 0))) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     ) &quot; &quot;(-&gt;&gt; (filter #(&gt;= (count %) 2) [[1] [1 2] [2 3 1]])\n     (map #(nth % 1))) &quot; &quot;(rest [[1 2] [1 2 3] [1 1]])&quot; &quot;(conj (rest [[1 2] [1 2 3] [1 1]]) [1 2])&quot; &quot;(cons (rest [[1 2] [1 2 3] [1 1]]) [1 2])&quot; &quot;(cons [] [1 2])&quot; &quot;(conj [] [1 2])&quot; &quot;(conj [[1 2] [1 2]] [22])&quot; &quot;(conj (rest [[1 2] [1 2]]) [22])&quot; &quot;(-&gt;&gt; (sortname (list22 prob22))\n     (let [a (first list)]\n       (cond (empty? list) ans)\n       :else a))&quot; &quot;(-&gt;&gt; (sortname (list22 prob22))\n     (let [a #(first %)]\n       (cond #(empty? %) 1)\n       :else a))&quot; &quot;(def a (sortname (list22 prob22)))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (let [a #(first %)]\n       (cond #(empty? %) 1)\n       :else a))&quot; &quot;(-&gt;&gt; (list22 prob22)\n     (let [b #(first %)]\n       (cond #(empty? %) 1)\n       :else b))&quot; &quot;(-&gt;&gt; (let [b #(first a)]\n       (cond #(empty? a) 1)\n       :else b))&quot; &quot;(let [b #(first %)]\n  (cond #(empty? %) 1)\n  :else b )&quot; &quot;b&quot; &quot;(let [b #(first a)] a)&quot; &quot;(let [b (first a)] b)&quot; &quot;(for [b (first a)] b)&quot; &quot;(for [b (first [1 2])] b)&quot; &quot;(let [b (first [1 2])] b)&quot; &quot;(let [b (first [[2 3] [1 2]])] b)&quot; &quot;(list22 prob22)&quot; &quot;(first (list22 prob22))&quot; &quot;(sortname (list22 prob22))&quot;], :remote []}}</component>
</project>